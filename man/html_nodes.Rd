% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selectors.R
\name{html_nodes}
\alias{html_nodes}
\alias{html_node}
\title{Select nodes from an HTML document}
\usage{
html_nodes(x, css, xpath)

html_node(x, css, xpath)
}
\arguments{
\item{x}{Either a document, a node set or a single node.}

\item{css, xpath}{Nodes to select. Supply one of \code{css} or \code{xpath}
depending on whether you want to use a CSS or XPath 1.0 selector.}
}
\value{
\code{html_node()} returns a nodeset the same length as the input.
\code{html_nodes()} flattens the output so there's no direct way to map
the output to the input.
}
\description{
\code{html_node()} and \code{html_nodes()} find HTML tags (nodes) using CSS selectors
or XPath expressions.
}
\details{
CSS selectors are particularly useful in conjunction with
\url{https://selectorgadget.com/}, which makes it very easy to discover the
selector you need. If you haven't used CSS selectors before, I'd recommend
starting with the the fun tutorial at \url{http://flukeout.github.io/}.
}
\section{CSS selector support}{


CSS selectors are translated to XPath selectors by the \pkg{selectr}
package, which is a port of the python \pkg{cssselect} library,
\url{https://pythonhosted.org/cssselect/}.

It implements the majority of CSS3 selectors, as described in
\url{http://www.w3.org/TR/2011/REC-css3-selectors-20110929/}. The
exceptions are listed below:
\itemize{
\item Pseudo selectors that require interactivity are ignored:
\verb{:hover}, \verb{:active}, \verb{:focus}, \verb{:target}, \verb{:visited}.
\item The following pseudo classes don't work with the wild card element, *:
\verb{*:first-of-type}, \verb{*:last-of-type}, \verb{*:nth-of-type},
\verb{*:nth-last-of-type}, \verb{*:only-of-type}
\item It supports \verb{:contains(text)}
\item You can use !=, \verb{[foo!=bar]} is the same as \verb{:not([foo=bar])}
\item \verb{:not()} accepts a sequence of simple selectors, not just a single
simple selector.
}
}

\examples{
url <- paste0(
  "https://web.archive.org/web/20190202054736/",
  "https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")

# html_nodes() well suited to use with the pipe
ateam \%>\% html_nodes("center") \%>\% html_nodes("td")
ateam \%>\% html_nodes("center") \%>\% html_nodes("font")

td <- ateam \%>\% html_nodes("center") \%>\% html_nodes("td")
td
# When applied to a list of nodes, html_nodes() returns all matching nodes
# beneath any of the elements, flattening results into a new nodelist.
td \%>\% html_nodes("font")

# html_node() returns the first matching node. If there are no matching
# nodes, it returns a "missing" node
td \%>\% html_node("font")

# To pick out an element or elements at specified positions, use [[ and [
ateam \%>\% html_nodes("table") \%>\% .[[1]] \%>\% html_nodes("img")
ateam \%>\% html_nodes("table") \%>\% .[1:2] \%>\% html_nodes("img")
}
